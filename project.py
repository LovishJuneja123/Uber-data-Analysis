# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1paBatNZaJ3WxLjTBcR3dz1cC4NuTqG2A
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

dataset= pd.read_csv('UberDataset.csv')
dataset.head()

dataset.shape

dataset.info()

# As we understood that there are a lot of null values in PURPOSE column, so for that we will me filling the null values with a NOT keyword.
dataset['PURPOSE'].fillna('NOT', inplace=True)

dataset.head()

dataset['START_DATE']=pd.to_datetime(dataset['START_DATE'],errors='coerce')
dataset['END_DATE']=pd.to_datetime(dataset['END_DATE'],errors='coerce')

dataset

from datetime import datetime

dataset['date'] = pd.DatetimeIndex(dataset['START_DATE']).date
dataset['time'] = pd.DatetimeIndex(dataset['START_DATE']).hour

#changing into categories of day and night
dataset['day-night'] = pd.cut(x=dataset['time'],
                              bins = [0,10,15,19,24],
                              labels = ['Morning','Afternoon','Evening','Night'])

dataset

dataset.dropna(inplace=True)
dataset

dataset.drop_duplicates(inplace=True)
dataset

"""# Data Visualization

Now, we will be using matplotlib and seaborn library for countplot the CATEGORY and PURPOSE columns.
"""

plt.figure(figsize=(12,6))

plt.subplot(1,2,1)
sns.countplot(dataset['CATEGORY'])
plt.xticks(rotation=0)

plt.subplot(1,2,2)
sns.countplot(dataset['PURPOSE'])
plt.xticks(rotation=0)

"""Let’s do the same for time column, here we will be using the time column which we have extracted above


"""

plt.figure(figsize=(15,5))
sns.countplot(dataset['day-night'])
plt.xticks(rotation='vertical')

"""Now, we will be comparing the two different categories along with the PURPOSE of the user."""

plt.figure(figsize=(15, 5))
sns.countplot(data=dataset, x='PURPOSE', hue='CATEGORY')
plt.xticks(rotation=90)
plt.show()

"""Insights from the above count-plots :
Most of the rides are booked for business purpose.
Most of the people book cabs for Meetings and Meal / Entertain purpose.
Most of the cabs are booked in the time duration of 10am-5pm (Afternoon).
"""

from sklearn.preprocessing import OneHotEncoder
object_cols = ['CATEGORY', 'PURPOSE']
OH_encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
OH_cols = pd.DataFrame(OH_encoder.fit_transform(dataset[object_cols]))
OH_cols.index = dataset.index
OH_cols.columns = OH_encoder.get_feature_names_out()
df_final = dataset.drop(object_cols, axis=1)
dataset = pd.concat([df_final, OH_cols], axis=1)

dataset.head()

# Select only numerical columns for correlation calculation
numeric_dataset = dataset.select_dtypes(include=['number'])

sns.heatmap(numeric_dataset.corr(),
            cmap='BrBG',
            fmt='.2f',
            linewidths=2,
            annot=True)

"""**Insights from the heatmap:**
Business and Personal Category are highly negatively correlated, this have already proven earlier. So this plot, justifies the above conclusions.
There is not much correlation between the features.

# Now, as we need to visualize the month data.
"""

dataset['MONTH'] = pd.DatetimeIndex(dataset['START_DATE']).month
month_label = {1.0: 'Jan', 2.0: 'Feb', 3.0: 'Mar', 4.0: 'April',
               5.0: 'May', 6.0: 'June', 7.0: 'July', 8.0: 'Aug',
               9.0: 'Sep', 10.0: 'Oct', 11.0: 'Nov', 12.0: 'Dec'}
dataset["MONTH"] = dataset.MONTH.map(month_label)

mon = dataset.MONTH.value_counts(sort=False)

# Month total rides count vs Month ride max count
df = pd.DataFrame({"MONTHS": mon.values,
                   "VALUE COUNT": dataset.groupby('MONTH',
                                                  sort=False)['MILES'].max()})

p = sns.lineplot(data=df)
p.set(xlabel="MONTHS", ylabel="VALUE COUNT")

"""Insights from the above plot :
*  The counts are very irregular.
*  Still its very clear that the counts are very less during Nov, Dec, Jan


"""

dataset['DAY'] = dataset.START_DATE.dt.weekday
day_label = {
    0: 'Mon', 1: 'Tues', 2: 'Wed', 3: 'Thus', 4: 'Fri', 5: 'Sat', 6: 'Sun'
}
dataset['DAY'] = dataset['DAY'].map(day_label)
day_label = dataset.DAY.value_counts()
sns.barplot(x=day_label.index, y=day_label);
plt.xlabel('DAY')
plt.ylabel('COUNT')

"""# Now, let’s explore the MILES Column .

"""

sns.boxplot(dataset['MILES'])

"""As the graph is not clearly understandable.But to get more clarity we can use distplot for values less than 40."""

sns.distplot(dataset[dataset['MILES']<40]['MILES'])

"""# Insights from the above plots :

1.   Most of the cabs booked for the distance of 0-5 miles.

2.   Majorly people chooses cabs for the distance of 0-20 miles.

3.   For distance more than 20 miles cab counts is nearly negligible.



"""